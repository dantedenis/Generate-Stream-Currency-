// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/contract/api_service.go

// Package mock_contract is a generated GoMock package.
package mock_contract

import (
	model "generate_stream_currency/pkg/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockApiService is a mock of ApiService interface.
type MockApiService struct {
	ctrl     *gomock.Controller
	recorder *MockApiServiceMockRecorder
}

// MockApiServiceMockRecorder is the mock recorder for MockApiService.
type MockApiServiceMockRecorder struct {
	mock *MockApiService
}

// NewMockApiService creates a new mock instance.
func NewMockApiService(ctrl *gomock.Controller) *MockApiService {
	mock := &MockApiService{ctrl: ctrl}
	mock.recorder = &MockApiServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiService) EXPECT() *MockApiServiceMockRecorder {
	return m.recorder
}

// GetCurrency mocks base method.
func (m *MockApiService) GetCurrency() model.Currency {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrency")
	ret0, _ := ret[0].(model.Currency)
	return ret0
}

// GetCurrency indicates an expected call of GetCurrency.
func (mr *MockApiServiceMockRecorder) GetCurrency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrency", reflect.TypeOf((*MockApiService)(nil).GetCurrency))
}

// Run mocks base method.
func (m *MockApiService) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockApiServiceMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockApiService)(nil).Run))
}
